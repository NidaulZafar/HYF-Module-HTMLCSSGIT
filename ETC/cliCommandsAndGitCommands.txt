Ans. 1: add a dot . before the dir name or the file name to hide them
to display it in the CLI enter the command ls -a
to make multiple folders simply add all folder names within single quotes separated by a space
to make  nested dirs write mkdir -p i/created/this/nested/path
to make addition in a txt file we add >> after the string. and single > if we want to overwrite
message 1
message 2
syntax to add text in an existing file echo space double quotes >> filename
Example echo "text here" >> <filename>


Git commands
Git init (to create a repo)
Rm -rf .git (to remove a file from git)
Git add <file name> or . (to add file(s) in the repo)
Git commit (we close and stamp the box. So nothing can be added anymore)
Git commit -m "<your commit msg>" commit the added files
Git status
Git checkout -- <filename> (to reset how a file was in the last commit)
(To bring a file from staging area into working tree)

(Syntax) Git checkout *****(5alphanumerical code of commit) -- <filename> (restore file from history to working tree and staging area)
Example git checkout 9ddb9 -- <filename>

Git checkout <filename> to move to the branch from the master file

Git log (shows all commits)
Git log -p (shows all commits and the contents of the file)
git push
Uploads commits to an remote/online repository

git pull
Downloads commits from a ‘remote’/online repository

git clone <git url copied from Github>
Download an existing online repository to your PC

Touch .gitignore (to create a ignore file)

Git reset <filename> (to remove the file from the staging area)
Git reset (reset all files)
Git reset HEAD <filename> (to retrieve a file from the latest commit into the staging area)

Q: what is the difference between git reset and git checkout?
Q. Different types of checkout?
Q. Why sometimes we open a GitHub link and our CV gets displayed in the browser while at other times it shows all the files separately? 
(https://hunny797.github.io/HYF-Module-HTMLCSSGIT/week1/
https://github.com/hunny797/HYF-Module-HTMLCSSGIT/tree/main/week1)

Git diff (shows the changes made)
Git diff --staged (shows the changes between staging area and committed files)

git branch (lists all local branches in the current repository)
Git branch <filename> (to create a branch)

Git branch -d <filename> (to delete a branch locally)

Git branch --merged (to check the files that have been merged)

git checkout [branch-name] — switches to the specified branch and updates the working directory. $ git checkout -b [branch] — makes a new branch and switches to it
Git merge <filename> (to merge a branch)





Git push origin --delete <filename> to delete branch remotely

Git rm <filename> (deletes file from rep.. deletes both from working area and staging area at once) 
git rm --cached <filename> (Removes the file from version control. It preserves the file locally
git mv [file-original] [file-renamed] (Changes the filename and prepares it for commit)



