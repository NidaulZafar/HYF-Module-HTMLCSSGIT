Ans. 1: add a dot . before the dir name or the file name to hide them
to display it in the CLI enter the command ls -a
to make multiple folders simply add all folder names within single quotes separated by a space
to make  nested dirs write mkdir -p i/created/this/nested/path
to make addition in a txt file we add >> after the string. and single > if we want to overwrite
message 1
message 2
syntax to add text in an existing file echo space double quotes >> filename
Example echo "text here" >> <filename>


mkdir folder1 folder2 folder3 (create 3 folders in the same place) 
touch file1.txt file2.txt
Cool website for CLI commands (https://alligator.io/workflow/command-line-creating-files-directories/)

Cat <filename> shows the text in a text file. But if you want to edit the file then type:
Nano <filename>



Git commands
Git init (to create a repo)
Rm -rf .git (to remove a file from git)
Git add <file name> or . (to add file(s) in the repo)
Git commit (we close and stamp the box. So nothing can be added anymore)
Git commit -m "<your commit msg>" commit the added files
Git status
Git checkout -- <filename> (to reset how a file was in the last commit)
(To bring a file from staging area into working tree)

(Syntax) Git checkout *****(5alphanumerical code of commit) -- <filename> (restore file from history to working tree and staging area)
Example git checkout 9ddb9 -- <filename>

Git checkout <filename> to move to the branch from the master file

Git log (shows all commits)
Git log -p (shows all commits and the contents of the file)

git log --oneline
display the log in only one line

git log --stat
shows the statistics. which file was changed who changed and when and how many changes were made.

git log -p (patch- shows more details i.e., what was changed in the files)

git log -p <6digits sha key> can directly go to a particular log and also see the details by using other flags
but will also show other commits
git show -p <6digits sha key> can directly go to a particular log and also see the details by using other flags
but will only show this one commit and none other.

git log --oneline --decorate --graph --all 
The --graph flag adds the bullets and lines to the leftmost part of the output.
This shows the actual branching that's happening.
The --all flag is what displays all of the branches in the repository.

git push
Uploads commits to an remote/online repository


git remote add origin /s/remote-project/1
(to add a remote repo)



git pull
Downloads commits from a ‘remote’/online repository

git clone <git url copied from Github>
Download an existing online repository to your PC

git clone <URL> foldername  (to clone a repo but rename it of your choice)

Touch .gitignore (to create a ignore file)
echo "*.tmp" >> .gitignore (to ask git to ignore all files with tmp ext)

Git reset <filename> (to remove the file from the staging area)
Git reset (reset all files)
Git reset HEAD <filename> (to retrieve a file from the latest commit into the staging area)

Q: what is the difference between git reset and git checkout?
Q. Different types of checkout?
Q. Why sometimes we open a GitHub link and our CV gets displayed in the browser while at other times it shows all the files separately? 
(https://hunny797.github.io/HYF-Module-HTMLCSSGIT/week1/
https://github.com/hunny797/HYF-Module-HTMLCSSGIT/tree/main/week1)
Q. How to check if there is a difference between the local repo and remote repo
Q. Can we store a repo in the directory of another repo?
Q. What is the different between border and outline in CSS?


Git diff (shows the changes made)
Git diff --staged (shows the changes between staging area and committed files)
git diff <commit> (provide the commit hash parametes to check the diff between particular files)
git diff <filename.js> (compare all the changes to a single file)
git difftool (load external tool to view differences)
git show <commit-hash> to view older changes.


git branch (lists all local branches in the current repository)
Git branch <filename> (to create a branch)
Git branch -d <filename> (to delete a branch locally)
Git branch --merged (to check the files that have been merged)
git branch alt-sidebar-loc 42a69f (this syntax will create a branch called "alt-sidebar-loc" 
and commit it to the SHA number given)

Git switch <branchname> switches to the specified branch
git checkout [branch-name] — switches to the specified branch and updates the working directory. 
$ git checkout -b [branch] — makes a new branch and switches to it
Git merge <filename> (to merge a branch)


git merge remotes/<remote-name>/<remote-branch-name> master
(merge the fetched changes into master)





Git push origin --delete <filename> to delete branch remotely

Git rm <filename> (deletes file from rep.. deletes both from working area and staging area at once) 
git rm --cached <filename> (Removes the file from version control. It preserves the file locally
git mv [file-original] [file-renamed] (Changes the filename and prepares it for commit)


git checkout head~4 (head goes to 4th parent of head)
git checkout C1 (head will go to C1)
Git branch -f main head~3 (force a branch to move somewhere)
git branch -f bugFix c0 (head will take bugFix(branch) to C0 by force

two commands to undo changes in Git -- one is using git reset and the other is using git revert
git reset HEAD~1  (move head one branch backwards)
git reset doesn't work for remote branches that others are using
In order to reverse changes and share those reversed changes with others,
 we need to use git revert.

moving work around
git cherry-pick <Commit1> <Commit2> <...>

git rebase -i HEAD~4
interactive rebase

git tag -a v2.0 -m "second tag"  (syntax to enter tags to most recent commits)
git tag -a v1.0 a87984 (addition of SHA to tag previous commits)
git tag (to check the avlbl tags)
git tag -d v1.0 (to delete the tag)




Press Esc and then type :wq to save and exit.
