Ans. 1: add a dot . before the dir name or the file name to hide them
to display it in the CLI enter the command ls -a
to make multiple folders simply add all folder names within single quotes separated by a space
to make  nested dirs write mkdir -p i/created/this/nested/path
to make addition in a txt file we add >> after the string. and single > if we want to overwrite
message 1
message 2
syntax to add text in an existing file echo space double quotes >> filename
Example echo "text here" >> <filename>


mkdir folder1 folder2 folder3 (create 3 folders in the same place) 
touch file1.txt file2.txt
Cool website for CLI commands (https://alligator.io/workflow/command-line-creating-files-directories/)

Cat <filename> shows the text in a text file. But if you want to edit the file then type:
Nano <filename>


creating a reptiles directory. To create the directory, you’ll use the mkdir command followed by the name of the directory
 you’d like to create:

$ mkdir reptiles
We now have a new directory to play with. Let’s cd there for good measure:

$ cd reptiles
Creating Multiple Directories

create multiple directories as arguments to the mkdir command:

$ mkdir alligator crocodile snake
A quick ls reveals that we now have three directories inside of our reptiles directory.

Creating Nested Directories
If we were to try mkdir snake/images everything would be fine because the snake directory already exists.

To tell mkdir that we’d like to attempt to create each directory in the path, we use the -p or --parents argument:

$ mkdir -p turtle/images
The --parents argument creates each directory along the way, and can be used to create as many directories deep as you need
 and/or the operating system will support:

$ mkdir -p lizard/images/1/2/3/4/5/6
Running tree lizard will reveal a series of nested directories that were just created.

Creating Directories in Multiple Directories
To create a directory named videos inside of the alligator and crocodile directories,
 we could list out the paths of both directories:

$ mkdir alligator/videos crocodiles/videos
File name blobbing allows us to accomplish this with a bit less syntax:

$ mkdir {alligator,crocodile}/videos
Creating an Empty File
Now that we have a whole bunch of directories created, let’s try our hand at creating some files.


$ touch README.md
If a file already exists, touch won’t complain. What it will do is set the modified time of the file to the current time,
 effectively touching the file!

Creating Empty Files
Similar to how mkdir can accept multiple paths, touch can do the same thing:

$ touch category.txt subcategory.txt
Or leveraging file name blobbing:

$ touch {category,subcategory}.txt
Creating Empty Files in Multiple Directories
Using touch isn’t limited to just file names, you can include paths to files as well:

$ touch alligator/README.md crocodile/README.md
To take things a step further, you can use the blobbing tip:

$ touch {alligator,crocodile}/README.md
Even one step further would be to create multiple files inside of multiple directories with additional blobbing:

$ touch {alligator,crocodile}/{category,subcategory}.txt
Creating a File with Text
Empty files are great, but they can only get you so far. By leveraging the echo command and > operator, 
we can create a brand new file and populate the file with some text, all without even opening a text editor:

$ echo "See ya later, alligator" > crocodile/catch-phrase.txt
Be careful though, the > means to create or overwrite a file. If the file already exists, the contents would be completely overwritten!

A safer approach is to use >> in scenarios where the file may exist. This will create the file and append the text to it. 
If the file exists, the text will be tacked on to the end of it:

$ echo "After 'while, crocodile" >> alligator/catch-phrase.txt
Creating a File with File Output
Using > and >> with echo simply takes the output from echo and writes it to the file.
 As it turns out, you can actually swap out echo for any command that writes to the standard output.

For example, if you wanted to create a file that contained a list of all of the *.txt files in the directory, you could:

$ ls **/*.txt >> directory.txt
Running cat directory.txt reveals the output from the ls command that is now stored in directory.txt.








Git commands
Git init (to create a repo)
Rm -rf .git (to remove a file from git)
Git add <file name> or . (to add file(s) in the repo)
Git commit (we close and stamp the box. So nothing can be added anymore)
Git commit -m "<your commit msg>" commit the added files
Git status
Git checkout -- <filename> (to reset how a file was in the last commit)
(To bring a file from staging area into working tree)

(Syntax) Git checkout *****(5alphanumerical code of commit) -- <filename> (restore file from history to working tree and staging area)
Example git checkout 9ddb9 -- <filename>

Git checkout <filename> to move to the branch from the master file

Git log (shows all commits)
Git log -p (shows all commits and the contents of the file)

git log --oneline
display the log in only one line

git log --stat
shows the statistics. which file was changed who changed and when and how many changes were made.

git log -p (patch- shows more details i.e., what was changed in the files)

git log -p <6digits sha key> can directly go to a particular log and also see the details by using other flags
but will also show other commits
git show -p <6digits sha key> can directly go to a particular log and also see the details by using other flags
but will only show this one commit and none other.

git log --oneline --decorate --graph --all 
The --graph flag adds the bullets and lines to the leftmost part of the output.
This shows the actual branching that's happening.
The --all flag is what displays all of the branches in the repository.

git push
Uploads commits to an remote/online repository


git remote add origin /s/remote-project/1
(to add a remote repo)



git pull
Downloads commits from a ‘remote’/online repository

git clone <git url copied from Github>
Download an existing online repository to your PC

git clone <URL> foldername  (to clone a repo but rename it of your choice)

Touch .gitignore (to create a ignore file)
echo "*.tmp" >> .gitignore (to ask git to ignore all files with tmp ext)

Git reset <filename> (to remove the file from the staging area)
Git reset (reset all files)
Git reset HEAD <filename> (to retrieve a file from the latest commit into the staging area)

Q: what is the difference between git reset and git checkout?
Q. Different types of checkout?
Q. Why sometimes we open a GitHub link and our CV gets displayed in the browser while at other times it shows all the files separately? 
(https://hunny797.github.io/HYF-Module-HTMLCSSGIT/week1/
https://github.com/hunny797/HYF-Module-HTMLCSSGIT/tree/main/week1)
Q. How to check if there is a difference between the local repo and remote repo
Q. Can we store a repo in the directory of another repo?
Q. What is the different between border and outline in CSS?


Git diff (shows the changes made)
Git diff --staged (shows the changes between staging area and committed files)
git diff <commit> (provide the commit hash parametes to check the diff between particular files)
git diff <filename.js> (compare all the changes to a single file)
git difftool (load external tool to view differences)
git show <commit-hash> to view older changes.


git branch (lists all local branches in the current repository)
Git branch <filename> (to create a branch)
Git branch -d <filename> (to delete a branch locally)
Git branch --merged (to check the files that have been merged)
git branch alt-sidebar-loc 42a69f (this syntax will create a branch called "alt-sidebar-loc" 
and commit it to the SHA number given)

Git switch <branchname> switches to the specified branch
git checkout [branch-name] — switches to the specified branch and updates the working directory. 
$ git checkout -b [branch] — makes a new branch and switches to it
Git merge <filename> (to merge a branch)


git merge remotes/<remote-name>/<remote-branch-name> master
(merge the fetched changes into master)





Git push origin --delete <filename> to delete branch remotely

Git rm <filename> (deletes file from rep.. deletes both from working area and staging area at once) 
git rm --cached <filename> (Removes the file from version control. It preserves the file locally
git mv [file-original] [file-renamed] (Changes the filename and prepares it for commit)


git checkout head~4 (head goes to 4th parent of head)
git checkout C1 (head will go to C1)
Git branch -f main head~3 (force a branch to move somewhere)
git branch -f bugFix c0 (head will take bugFix(branch) to C0 by force

two commands to undo changes in Git -- one is using git reset and the other is using git revert
git reset HEAD~1  (move head one branch backwards)
git reset doesn't work for remote branches that others are using
In order to reverse changes and share those reversed changes with others,
 we need to use git revert.

moving work around
git cherry-pick <Commit1> <Commit2> <...>

git rebase -i HEAD~4
interactive rebase

git tag -a v2.0 -m "second tag"  (syntax to enter tags to most recent commits)
git tag -a v1.0 a87984 (addition of SHA to tag previous commits)
git tag (to check the avlbl tags)
git tag -d v1.0 (to delete the tag)


git revert <SHA-of-commit-to-revert>

Relative Commit References
There are special characters called "Ancestry References" that we can use to tell Git.
Those characters are:

^ – indicates the parent commit
~ – indicates the first parent commit
Here's how we can refer to previous commits:

the parent commit – the following indicate the parent commit of the current commit
HEAD^
HEAD~
HEAD~1
the grandparent commit – the following indicate the grandparent commit of the current commit
HEAD^^
HEAD~2
the great-grandparent commit – the following indicate the great-grandparent commit of the current commit
HEAD^^^
HEAD~3




Press Esc and then type :wq to save and exit.
